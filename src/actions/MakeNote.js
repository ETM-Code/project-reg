// MakeNote.js - Updated to use "note" parameter and trim its value
const ActionBase = require('./ActionBase');
const fs = require('fs');
const path = require('path');
const { numTokensFromString } = require('../util/tokenCounter');
const pathManager = require('../util/pathManager');

const NOTES_FILE = pathManager.getNotesPath();
const MAX_TOKENS = 100000;

// Initialize notes file if missing
function initializeNotesFile() {
  try {
    const dataDir = pathManager.getDataDir();
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true });
    }
    if (!fs.existsSync(NOTES_FILE)) {
      fs.writeFileSync(NOTES_FILE, '');
    }
  } catch (error) {
    console.error('[MakeNote] Failed to initialize notes file:', error);
  }
}

class MakeNote extends ActionBase {
  async execute(params) {
    // Initialize file if needed
    initializeNotesFile();
    
    // Extract and trim the note value
    const note = params.note ? params.note.trim() : "";
    let noteId = params.id ? params.id.trim() : null;
    console.log("MakeNote received note:", note, "id:", noteId);
    let existingNotes = fs.readFileSync(NOTES_FILE, 'utf-8');
    let notesArray = existingNotes
      ? existingNotes.split('\n').filter(Boolean)
      : [];

    // Helper to generate a short id (6 alphanumeric chars)
    function generateShortId() {
      return Math.random().toString(36).substring(2, 8);
    }

    // If no id provided, generate one
    if (!noteId) {
      noteId = generateShortId();
    }

    const timestamp = new Date().toISOString();
    const noteWithIdAndTimestamp = `[${noteId}] [${timestamp}] ${note}`;

    // If an id is provided, overwrite the previous note with that id
    let noteOverwritten = false;
    if (params.id) {
      notesArray = notesArray.map(line => {
        if (line.startsWith(`[${noteId}]`)) {
          noteOverwritten = true;
          return noteWithIdAndTimestamp;
        }
        return line;
      });
      if (!noteOverwritten) {
        notesArray.push(noteWithIdAndTimestamp);
      }
    } else {
      notesArray.push(noteWithIdAndTimestamp);
    }

    const newNotesContent = notesArray.join('\n');
    const totalTokens = numTokensFromString(newNotesContent);
    if (totalTokens > MAX_TOKENS) {
      archiveNotes(newNotesContent);
      fs.writeFileSync(NOTES_FILE, '');
    } else {
      fs.writeFileSync(NOTES_FILE, newNotesContent);
    }
    return { status: noteOverwritten ? 'Note overwritten with id' : 'Note added with autogenerated id', id: noteId };
  }

  /**
   * @override
   * @returns {{name: string, description: string, parameters: object}}
   */
  static getSchema() {
    return {
      name: 'make_note',
      description: 'Aggressively append or update a note in the user notes log. Use this for ANY information that could be useful later, even if you are unsure. Each note is stored with a short autogenerated id. If you specify an id, the note with that id will be overwritten. Otherwise, a new id is generated.',
      parameters: {
        type: 'object',
        properties: {
          note: { type: 'string', description: 'The note text to add.' },
          id: { type: 'string', description: 'Optional. If provided, overwrites the note with this id.' }
        },
        required: ['note']
      }
    };
  }
}

function archiveNotes(notes) {
  const archiveFile = pathManager.getArchivedNotesPath();
  let archived = fs.existsSync(archiveFile)
    ? JSON.parse(fs.readFileSync(archiveFile))
    : [];
  archived.push({ archivedAt: new Date().toISOString(), notes });
  fs.writeFileSync(archiveFile, JSON.stringify(archived, null, 2));
  fs.writeFileSync(NOTES_FILE, '');
}

module.exports = MakeNote;
